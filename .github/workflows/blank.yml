name: Zero-touch CRM Provisioning

on:
  workflow_dispatch:
    inputs:
      company_name:
        description: "Company name"
        required: true
        type: string
      domain_prefix:
        description: "Subdomain prefix (e.g., 'acme' -> acme.propaicrm.com)"
        required: true
        type: string
        pattern: '^[a-z0-9-]+$'
      logo_url:
        description: "Public URL to the logo image (PNG/JPG/SVG)"
        required: true
        type: string
        pattern: '^https?://.+\.(png|jpg|jpeg|svg)$'
      company_email:
        description: "Public company email"
        required: true
        type: string
        pattern: '^[^@]+@[^@]+\.[^@]+$'
      company_phone:
        description: "Public company phone"
        required: true
        type: string
      company_location:
        description: "City, Country (or full address)"
        required: true
        type: string
      backend_cors_origin:
        description: "Frontend origin for CORS (leave blank to auto-fill after Vercel deploy)"
        required: false
        type: string
        default: ""
      backend_env_frontend_url_override:
        description: "Override FRONTEND_URL env sent to backend (optional)"
        required: false
        type: string
        default: ""
      neon_db_url:
        description: "Postgres connection string from Neon (postgres://...)"
        required: true
        type: string
        pattern: '^postgres://.+$'
      cloudinary_folder:
        description: "Cloudinary folder to store logo (e.g., 'logos')"
        required: false
        type: string
        default: "logos"
        pattern: '^[a-zA-Z0-9_-]+$'

env:
  FRONTEND_REPO: github.com/RockaiDev/Propai-CRM-Front-End.git
  BACKEND_REPO: github.com/RockaiDev/Propai-CRM-Back-End.git
  ROOT_DOMAIN: propaicrm.com
  WORKSPACE_DIR: work
  TIMEOUT_MINUTES: 30

jobs:
  provision:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ env.TIMEOUT_MINUTES }}
    permissions:
      contents: write
      actions: read

    env:
      VERCEL_SCOPE: ${{ secrets.VERCEL_SCOPE }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
      CLOUDINARY_UPLOAD_PRESET: ${{ secrets.CLOUDINARY_UPLOAD_PRESET }}
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      NAMECHEAP_API_USER: ${{ secrets.NAMECHEAP_API_USER }}
      NAMECHEAP_API_KEY: ${{ secrets.NAMECHEAP_API_KEY }}
      NAMECHEAP_USERNAME: ${{ secrets.NAMECHEAP_USERNAME }}
      NAMECHEAP_CLIENT_IP: ${{ secrets.NAMECHEAP_CLIENT_IP }}

    steps:
      - name: Checkout orchestrator repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl coreutils
          npm i -g vercel @railway/cli
        timeout-minutes: 10

      - name: Prepare workspace
        run: |
          mkdir -p ${{ env.WORKSPACE_DIR }}
          echo "${{ github.event.inputs.company_name }}" > ${{ env.WORKSPACE_DIR }}/company_name.txt
          echo "Provisioning started at: $(date)" > ${{ env.WORKSPACE_DIR }}/provision.log

      - name: Upload logo to Cloudinary
        id: logo
        run: |
          echo "📤 Uploading logo to Cloudinary..." | tee -a ${{ env.WORKSPACE_DIR }}/provision.log
          
          bash scripts/upload_logo.sh \
            "${{ github.event.inputs.logo_url }}" \
            "${{ github.event.inputs.cloudinary_folder }}" \
            > ${{ env.WORKSPACE_DIR }}/logo_upload.json 2>&1

          if [ $? -ne 0 ]; then
            echo "❌ Logo upload failed"
            cat ${{ env.WORKSPACE_DIR }}/logo_upload.json
            exit 1
          fi

          echo "cloudinary_json=$(cat ${{ env.WORKSPACE_DIR }}/logo_upload.json | jq -c '.')" >> $GITHUB_OUTPUT
          echo "logo_url=$(cat ${{ env.WORKSPACE_DIR }}/logo_upload.json | jq -r '.secure_url')" >> $GITHUB_OUTPUT
          echo "✅ Logo uploaded successfully" | tee -a ${{ env.WORKSPACE_DIR }}/provision.log
        timeout-minutes: 5

      - name: Clone frontend
        run: |
          echo "📥 Cloning frontend repository..." | tee -a ${{ env.WORKSPACE_DIR }}/provision.log
          git clone --depth=1 https://x-access-token:${{ secrets.GITHUB_TOKEN }}@${{ env.FRONTEND_REPO }} ${{ env.WORKSPACE_DIR }}/frontend
        timeout-minutes: 5

      - name: Deploy FRONTEND to Vercel (with envs)
        id: vercel
        env:
          COMPANY_NAME: ${{ github.event.inputs.company_name }}
          COMPANY_EMAIL: ${{ github.event.inputs.company_email }}
          COMPANY_PHONE: ${{ github.event.inputs.company_phone }}
          COMPANY_LOCATION: ${{ github.event.inputs.company_location }}
          COMPANY_LOGO_URL: ${{ steps.logo.outputs.logo_url }}
          DOMAIN_PREFIX: ${{ github.event.inputs.domain_prefix }}
          ROOT_DOMAIN: ${{ env.ROOT_DOMAIN }}
        run: |
          echo "🚀 Deploying frontend to Vercel..." | tee -a ${{ env.WORKSPACE_DIR }}/provision.log
          
          bash scripts/deploy_frontend_vercel.sh ${{ env.WORKSPACE_DIR }}/frontend > ${{ env.WORKSPACE_DIR }}/vercel.json 2>&1

          if [ $? -ne 0 ]; then
            echo "❌ Frontend deployment failed"
            cat ${{ env.WORKSPACE_DIR }}/vercel.json
            exit 1
          fi

          echo "vercel_deploy=$(cat ${{ env.WORKSPACE_DIR }}/vercel.json | jq -c '.')" >> $GITHUB_OUTPUT
          echo "frontend_url=$(cat ${{ env.WORKSPACE_DIR }}/vercel.json | jq -r '.url')" >> $GITHUB_OUTPUT
          echo "frontend_host=$(cat ${{ env.WORKSPACE_DIR }}/vercel.json | jq -r '.host')" >> $GITHUB_OUTPUT
          echo "✅ Frontend deployed successfully" | tee -a ${{ env.WORKSPACE_DIR }}/provision.log
        timeout-minutes: 15

      - name: Clone backend
        run: |
          echo "📥 Cloning backend repository..." | tee -a ${{ env.WORKSPACE_DIR }}/provision.log
          git clone --depth=1 https://x-access-token:${{ secrets.GITHUB_TOKEN }}@${{ env.BACKEND_REPO }} ${{ env.WORKSPACE_DIR }}/backend
        timeout-minutes: 5

      - name: Deploy BACKEND to Railway (with envs)
        id: railway
        env:
          COMPANY_NAME: ${{ github.event.inputs.company_name }}
          FRONTEND_URL: ${{ github.event.inputs.backend_env_frontend_url_override != '' && github.event.inputs.backend_env_frontend_url_override || steps.vercel.outputs.frontend_url }}
          CORS_ORIGIN: ${{ github.event.inputs.backend_cors_origin != '' && github.event.inputs.backend_cors_origin || steps.vercel.outputs.frontend_url }}
          DB_URL: ${{ github.event.inputs.neon_db_url }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          SMTP_FROM: ${{ secrets.SMTP_FROM }}
        run: |
          echo "🚀 Deploying backend to Railway..." | tee -a ${{ env.WORKSPACE_DIR }}/provision.log
          
          bash scripts/deploy_backend_railway.sh ${{ env.WORKSPACE_DIR }}/backend > ${{ env.WORKSPACE_DIR }}/railway.json 2>&1

          if [ $? -ne 0 ]; then
            echo "❌ Backend deployment failed"
            cat ${{ env.WORKSPACE_DIR }}/railway.json
            exit 1
          fi

          echo "railway_json=$(cat ${{ env.WORKSPACE_DIR }}/railway.json | jq -c '.')" >> $GITHUB_OUTPUT
          echo "backend_url=$(cat ${{ env.WORKSPACE_DIR }}/railway.json | jq -r '.url')" >> $GITHUB_OUTPUT
          echo "✅ Backend deployed successfully" | tee -a ${{ env.WORKSPACE_DIR }}/provision.log
        timeout-minutes: 15

      - name: Configure DNS on Namecheap for subdomain → Vercel
        id: dns
        env:
          SUBDOMAIN: ${{ github.event.inputs.domain_prefix }}
          DOMAIN: ${{ env.ROOT_DOMAIN }}
          VERCEL_HOST: ${{ steps.vercel.outputs.frontend_host }}
        run: |
          echo "🌐 Configuring DNS..." | tee -a ${{ env.WORKSPACE_DIR }}/provision.log
          
          bash scripts/configure_dns_namecheap.sh \
            "$SUBDOMAIN" "$DOMAIN" "$VERCEL_HOST" > ${{ env.WORKSPACE_DIR }}/dns.json 2>&1

          if [ $? -ne 0 ]; then
            echo "❌ DNS configuration failed"
            cat ${{ env.WORKSPACE_DIR }}/dns.json
            exit 1
          fi

          echo "dns_json=$(cat ${{ env.WORKSPACE_DIR }}/dns.json | jq -c '.')" >> $GITHUB_OUTPUT
          echo "✅ DNS configured successfully" | tee -a ${{ env.WORKSPACE_DIR }}/provision.log
        timeout-minutes: 10

      - name: Wait for DNS propagation
        run: |
          echo "⏳ Waiting for DNS propagation..." | tee -a ${{ env.WORKSPACE_DIR }}/provision.log
          sleep 30
          echo "✅ DNS propagation wait completed" | tee -a ${{ env.WORKSPACE_DIR }}/provision.log

      - name: Verify deployment (frontend + backend)
        id: verify
        env:
          FRONTEND_URL: https://${{ github.event.inputs.domain_prefix }}.${{ env.ROOT_DOMAIN }}
          BACKEND_URL: ${{ steps.railway.outputs.backend_url }}
        run: |
          echo "🔍 Verifying deployment..." | tee -a ${{ env.WORKSPACE_DIR }}/provision.log
          
          # Retry verification up to 3 times
          for i in {1..3}; do
            echo "Attempt $i of 3..." | tee -a ${{ env.WORKSPACE_DIR }}/provision.log
            
            bash scripts/verify.sh \
              "$FRONTEND_URL" \
              "$BACKEND_URL" > ${{ env.WORKSPACE_DIR }}/verify.json 2>&1

            if [ $? -eq 0 ]; then
              echo "✅ Verification successful on attempt $i" | tee -a ${{ env.WORKSPACE_DIR }}/provision.log
              break
            else
              echo "⚠️ Verification failed on attempt $i" | tee -a ${{ env.WORKSPACE_DIR }}/provision.log
              if [ $i -eq 3 ]; then
                echo "❌ All verification attempts failed"
                cat ${{ env.WORKSPACE_DIR }}/verify.json
                exit 1
              fi
              sleep 30
            fi
          done

          echo "verify_json=$(cat ${{ env.WORKSPACE_DIR }}/verify.json | jq -c '.')" >> $GITHUB_OUTPUT
        timeout-minutes: 10

      - name: Generate deployment summary
        run: |
          echo "📋 Generating deployment summary..." | tee -a ${{ env.WORKSPACE_DIR }}/provision.log
          
          cat > ${{ env.WORKSPACE_DIR }}/summary.md << EOF
          # 🎉 CRM Provisioning Complete

          ## Company Information
          - **Name**: ${{ github.event.inputs.company_name }}
          - **Email**: ${{ github.event.inputs.company_email }}
          - **Phone**: ${{ github.event.inputs.company_phone }}
          - **Location**: ${{ github.event.inputs.company_location }}

          ## Deployment URLs
          - **Frontend**: https://${{ github.event.inputs.domain_prefix }}.${{ env.ROOT_DOMAIN }}
          - **Backend**: ${{ steps.railway.outputs.backend_url }}
          - **Logo**: ${{ steps.logo.outputs.logo_url }}

          ## Verification Results
          \`\`\`json
          $(cat ${{ env.WORKSPACE_DIR }}/verify.json | jq '.')
          \`\`\`

          ## Provisioning Log
          \`\`\`
          $(cat ${{ env.WORKSPACE_DIR }}/provision.log)
          \`\`\`

          **Provisioned at**: $(date)
          EOF

      - name: Summary
        run: |
          echo "### ✅ CRM Provisioning Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Company**: ${{ github.event.inputs.company_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend**: https://${{ github.event.inputs.domain_prefix }}.${{ env.ROOT_DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "**Backend**: ${{ steps.railway.outputs.backend_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Logo**: ${{ steps.logo.outputs.logo_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Verification Status**: ✅ All checks passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 [View detailed summary](${{ env.WORKSPACE_DIR }}/summary.md)" >> $GITHUB_STEP_SUMMARY

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: crm-provisioning-artifacts-${{ github.event.inputs.domain_prefix }}
          path: ${{ env.WORKSPACE_DIR }}/
          retention-days: 30

  notify-failure:
    needs: provision
    if: failure()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Notify failure
        run: |
          echo "❌ CRM provisioning failed for company: ${{ github.event.inputs.company_name }}"
          echo "Domain prefix: ${{ github.event.inputs.domain_prefix }}"
          echo "Please check the workflow logs for details."
          echo ""
          echo "**Failed at**: $(date)"
          echo "**Workflow run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
